/* 0.24.1 */import Complex from 'complex.js';
import Decimal from 'decimal.js';
import { BoxedExpression, Rational } from '../public';
/**
 * Attempt to factor a numeric coefficient `c` and a `rest` out of a
 * canonical expression `expr` such that `ce.mul(c, rest)` is equal to `expr`.
 *
 * Attempts to make `rest` a positive value (i.e. pulls out negative sign).
 *
 * The numeric coefficient could be an expression, for example:
 * ['Multiply', 2, ['Sqrt', 5], 'x']
 *    -> [['Multiply', 2, ['Sqrt', 5]], 'x']
 *
 * ['Multiply', 2, 'x', 3, 'a']
 *    -> [6, ['Multiply', 'x', 'a']]
 *
 * ['Divide', ['Multiply', 2, 'x'], ['Multiply', 3, 'y', 'a']]
 *    -> [['Rational', 2, 3], ['Divide', 'x', ['Multiply, 'y', 'a']]]
 */
export declare function asCoefficient(expr: BoxedExpression): [coef: Rational, rest: BoxedExpression];
export declare function applyCoefficient(value: number | Decimal | Complex | Rational | null, coef: Rational): number | Decimal | Complex | Rational | null;
/** Combine rational expressions into a single fraction */
export declare function together(op: BoxedExpression): BoxedExpression;
/**
 * Return a list of expressions that multiply together to form `expr`.
 */
export declare function factor(expr: BoxedExpression): BoxedExpression;
